# Kubernetes deployment for Quantum HVAC Control System
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-hvac-controller
  namespace: quantum-hvac
  labels:
    app: quantum-hvac
    component: controller
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: quantum-hvac
      component: controller
  template:
    metadata:
      labels:
        app: quantum-hvac
        component: controller
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: quantum-hvac
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: quantum-controller
        image: quantum-hvac:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: dashboard
          containerPort: 8080
          protocol: TCP
        - name: api
          containerPort: 8081
          protocol: TCP
        env:
        - name: QUANTUM_CTL_CONFIG
          value: "/app/configs/production.yaml"
        - name: QUANTUM_CTL_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: quantum-hvac-config
              key: log-level
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: quantum-hvac-secrets
              key: redis-url
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: quantum-hvac-secrets
              key: postgres-url
        - name: DWAVE_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: quantum-hvac-secrets
              key: dwave-api-token
              optional: true
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: api
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: api
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 30
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: quantum-hvac-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: quantum-hvac-data
      - name: logs-volume
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - quantum-hvac
                - key: component
                  operator: In
                  values:
                  - controller
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "quantum-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: quantum-hvac-controller-service
  namespace: quantum-hvac
  labels:
    app: quantum-hvac
    component: controller
spec:
  type: ClusterIP
  ports:
  - name: dashboard
    port: 8080
    targetPort: dashboard
    protocol: TCP
  - name: api
    port: 8081
    targetPort: api
    protocol: TCP
  selector:
    app: quantum-hvac
    component: controller

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-hvac-config
  namespace: quantum-hvac
data:
  log-level: "INFO"
  production.yaml: |
    # Production configuration for Quantum HVAC Control
    system:
      log_level: INFO
      worker_pool_size: 8
      max_concurrent_optimizations: 16
      
    optimization:
      default_solver: hybrid_v2
      num_reads: 1000
      annealing_time: 20
      prediction_horizon: 24
      control_interval: 15
      
    safety:
      min_zone_temp: 16.0
      max_zone_temp: 28.0
      max_humidity: 80.0
      max_power_per_zone: 25.0
      emergency_response_timeout: 30
      
    auto_scaling:
      enabled: true
      cpu_scale_up_threshold: 70.0
      cpu_scale_down_threshold: 30.0
      memory_scale_up_threshold: 80.0
      min_workers: 2
      max_workers: 16
      evaluation_interval: 60
      cooldown_period: 300
      
    monitoring:
      metrics_retention_hours: 168  # 7 days
      health_check_interval: 30
      performance_logging: true
      
    cloud_sync:
      enabled: false  # Configure per deployment
      sync_interval: 300
      batch_size: 100

---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-hvac-secrets
  namespace: quantum-hvac
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  redis-url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzkvMA==  # redis://redis-service:6379/0
  postgres-url: cG9zdGdyZXNxbDovL3F1YW50dW06cXVhbnR1bTEyM0Bwb3N0Z3Jlcy1zZXJ2aWNlOjU0MzIvcXVhbnR1bV9odmFj  # postgresql://quantum:quantum123@postgres-service:5432/quantum_hvac

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-hvac-data
  namespace: quantum-hvac
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your cluster

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-hvac-hpa
  namespace: quantum-hvac
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-hvac-controller
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: quantum-hvac
  namespace: quantum-hvac
  labels:
    app: quantum-hvac

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quantum-hvac-ingress
  namespace: quantum-hvac
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - quantum-hvac.example.com
    secretName: quantum-hvac-tls
  rules:
  - host: quantum-hvac.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-hvac-controller-service
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: quantum-hvac-controller-service
            port:
              number: 8081
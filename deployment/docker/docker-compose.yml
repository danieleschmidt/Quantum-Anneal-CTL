# Docker Compose for Quantum HVAC Control System
version: '3.8'

services:
  # Main quantum control application
  quantum-hvac:
    build: 
      context: ../..
      dockerfile: deployment/docker/Dockerfile
      target: production
    container_name: quantum-hvac-controller
    ports:
      - "8080:8080"  # Dashboard
      - "8081:8081"  # API
    environment:
      - QUANTUM_CTL_CONFIG=/app/configs/production.yaml
      - QUANTUM_CTL_LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://quantum:quantum123@postgres:5432/quantum_hvac
    volumes:
      - ./configs:/app/configs:ro
      - quantum_logs:/app/logs
      - quantum_data:/app/data
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "python", "-c", "import quantum_ctl; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and coordination
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    environment:
      - POSTGRES_DB=quantum_hvac
      - POSTGRES_USER=quantum
      - POSTGRES_PASSWORD=quantum123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=quantum123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped

  # Load balancer for high availability
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - quantum-hvac
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  quantum_logs:
    driver: local
  quantum_data:
    driver: local

networks:
  default:
    name: quantum-hvac-network
    driver: bridge
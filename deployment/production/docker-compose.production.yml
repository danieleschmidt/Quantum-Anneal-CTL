version: '3.8'

services:
  quantum-hvac-api:
    image: quantum-hvac-ctl:latest
    container_name: quantum-hvac-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - QUANTUM_CTL_MASTER_KEY=${QUANTUM_CTL_MASTER_KEY}
      - DWAVE_API_TOKEN=${DWAVE_API_TOKEN}
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/quantum_hvac
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - quantum-hvac-data:/app/data
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  quantum-hvac-dashboard:
    image: quantum-hvac-ctl:latest
    container_name: quantum-hvac-dashboard
    restart: unless-stopped
    command: ["python", "-m", "quantum_ctl.dashboard.analytics_dashboard"]
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - quantum-hvac-api
      - redis
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: quantum-hvac-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  postgres:
    image: postgres:15-alpine
    container_name: quantum-hvac-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=quantum_hvac
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quantum_hvac"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-hvac-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: quantum-hvac-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: quantum-hvac-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - quantum-hvac-api
      - quantum-hvac-dashboard
      - grafana
    networks:
      - quantum-hvac-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  watchtower:
    image: containrrr/watchtower
    container_name: quantum-hvac-watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 2 * * *  # Check for updates at 2 AM daily
      - WATCHTOWER_NOTIFICATIONS=shoutrrr://slack://token@channel
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - quantum-hvac-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  quantum-hvac-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  quantum-hvac-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
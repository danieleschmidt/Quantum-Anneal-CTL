name: Quantum HVAC CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: 3.12

jobs:
  # Code Quality & Testing
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Install development dependencies
      run: |
        pip install pytest pytest-asyncio pytest-cov black isort flake8 mypy safety bandit

    - name: Code formatting check (black)
      run: black --check --diff quantum_ctl tests

    - name: Import sorting check (isort)
      run: isort --check-only --diff quantum_ctl tests

    - name: Lint with flake8
      run: |
        flake8 quantum_ctl --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 quantum_ctl --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type checking with mypy
      run: mypy quantum_ctl --ignore-missing-imports --no-strict-optional

    - name: Security check with bandit
      run: bandit -r quantum_ctl -f json -o bandit-report.json || true

    - name: Safety check for dependencies
      run: safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/ -v --cov=quantum_ctl --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json
          coverage.xml

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Images
  build:
    needs: [quality]
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: testing
        load: true
        tags: quantum-hvac:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run tests in Docker
      run: |
        docker run --rm -v $PWD:/app/test-results quantum-hvac:test

    - name: Build and push production image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # Integration Tests
  integration:
    needs: [build]
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test  
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to be ready

    - name: Run integration tests
      run: |
        docker compose -f docker-compose.test.yml exec -T api pytest tests/integration/ -v

    - name: Collect logs
      if: always()
      run: |
        mkdir -p logs
        docker compose -f docker-compose.test.yml logs > logs/docker-compose.log

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-logs
        path: logs/

    - name: Cleanup
      if: always()
      run: docker compose -f docker-compose.test.yml down -v

  # Performance Testing
  performance:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up performance test environment
      run: |
        docker compose -f docker-compose.performance.yml up -d
        sleep 60  # Wait for full startup

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run tests/performance/api-load-test.js
        k6 run tests/performance/optimization-test.js

    - name: Generate performance report
      run: |
        mkdir -p performance-reports
        # Generate performance analysis (would be implemented)

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: performance-reports/

  # Deploy to Staging
  deploy-staging:
    needs: [integration, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to EKS Staging
      run: |
        aws eks update-kubeconfig --region us-west-2 --name quantum-hvac-staging
        
        # Update image tag in deployment
        sed -i "s|quantum-hvac:latest|${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/staging-deployment.yaml
        
        kubectl apply -f deployment/kubernetes/staging-deployment.yaml
        kubectl rollout status deployment/quantum-hvac-api -n quantum-hvac-staging --timeout=300s

    - name: Run smoke tests against staging
      run: |
        sleep 60  # Wait for deployment
        ./scripts/smoke-tests.sh https://staging-api.quantum-hvac.com

  # Deploy to Production
  deploy-production:
    needs: [integration, security, performance]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to EKS Production
      run: |
        aws eks update-kubeconfig --region us-west-2 --name quantum-hvac-production
        
        # Update image tag in deployment
        sed -i "s|quantum-hvac:latest|${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/production-deployment.yaml
        
        # Apply deployment with rolling update
        kubectl apply -f deployment/kubernetes/production-deployment.yaml
        kubectl rollout status deployment/quantum-hvac-api -n quantum-hvac-prod --timeout=600s

    - name: Verify production deployment
      run: |
        ./scripts/production-health-check.sh https://api.quantum-hvac.com

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'Quantum HVAC ${{ github.event.release.tag_name }} deployed to production successfully! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Delete old images
      run: |
        # Clean up old container images (keep last 10)
        echo "Cleaning up old container images..."
        # Implementation would go here
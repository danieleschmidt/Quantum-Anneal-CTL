version: '3.8'

services:
  # Quantum HVAC Controller Core Service
  quantum-hvac-controller:
    build:
      context: ../../
      dockerfile: deploy/production/Dockerfile.enhanced
    image: quantum-anneal-ctl:production
    container_name: quantum-hvac-controller
    restart: unless-stopped
    environment:
      - QUANTUM_ENV=production
      - DWAVE_API_TOKEN=${DWAVE_API_TOKEN:-}
      - LOG_LEVEL=INFO
      - HEALTH_CHECK_INTERVAL=30
      - CACHE_MAX_SIZE=5000
      - COMPLIANCE_MODE=gdpr,ccpa,iso27001
      - DEFAULT_LOCALE=en
      - REDIS_URL=redis://redis:6379/0
      - POSTGRES_URL=postgresql://quantum_user:${POSTGRES_PASSWORD}@postgres:5432/quantum_hvac
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=quantum-hvac
      - INFLUXDB_BUCKET=hvac-metrics
      - PROMETHEUS_PUSHGATEWAY=http://prometheus:9090
    ports:
      - "8000:8000"   # API
      - "8001:8001"   # Health/Metrics
      - "8002:8002"   # WebSocket
    volumes:
      - quantum-logs:/app/logs
      - quantum-config:/app/config
      - quantum-cache:/app/cache
    networks:
      - quantum-network
    depends_on:
      - redis
      - postgres
      - influxdb
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: quantum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - quantum-network
    depends_on:
      - quantum-hvac-controller
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: quantum-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=quantum_hvac
      - POSTGRES_USER=quantum_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantum_user -d quantum_hvac"]
      interval: 30s
      timeout: 5s
      retries: 3

  # InfluxDB for Time Series Data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: quantum-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=quantum-hvac
      - DOCKER_INFLUXDB_INIT_BUCKET=hvac-metrics
      - DOCKER_INFLUXDB_INIT_RETENTION=90d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: quantum-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: quantum-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel,grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - quantum-network
    depends_on:
      - prometheus
      - influxdb
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Log Management (optional)
  loki:
    image: grafana/loki:2.8.0
    container_name: quantum-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - quantum-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: quantum-backup
    restart: "no"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/source-data:ro
      - backup-data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - quantum-network
    depends_on:
      - postgres
    command: >
      sh -c "
        echo 'Backup service ready. Run: docker exec quantum-backup /backup.sh'
        tail -f /dev/null
      "

  # Health Check Service
  healthcheck:
    image: alpine/curl:latest
    container_name: quantum-healthcheck
    restart: unless-stopped
    volumes:
      - ./scripts/healthcheck.sh:/healthcheck.sh:ro
    networks:
      - quantum-network
    depends_on:
      - quantum-hvac-controller
    command: >
      sh -c "
        chmod +x /healthcheck.sh
        while true; do
          /healthcheck.sh
          sleep 300
        done
      "

volumes:
  quantum-logs:
    driver: local
  quantum-config:
    driver: local
  quantum-cache:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local
  backup-data:
    driver: local

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
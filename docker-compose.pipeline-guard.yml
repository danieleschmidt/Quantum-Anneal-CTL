version: '3.8'

services:
  # Redis for cluster coordination
  redis:
    image: redis:7-alpine
    container_name: pipeline-guard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - pipeline-guard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Pipeline Guard Service
  pipeline-guard:
    build:
      context: .
      dockerfile: Dockerfile.pipeline-guard
    container_name: pipeline-guard-main
    depends_on:
      - redis
    ports:
      - "8765:8765"  # Cluster communication
      - "8080:8080"  # Web dashboard
      - "9090:9090"  # Metrics endpoint
    volumes:
      - ./config/pipeline-guard.yaml:/etc/pipeline-guard/config.yaml:ro
      - ./logs:/var/log/pipeline-guard
      - ./data:/var/lib/pipeline-guard
    environment:
      - PYTHONPATH=/app
      - PIPELINE_GUARD_CONFIG=/etc/pipeline-guard/config.yaml
      - REDIS_URL=redis://redis:6379
    networks:
      - pipeline-guard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Secondary Pipeline Guard Node (for HA)
  pipeline-guard-2:
    build:
      context: .
      dockerfile: Dockerfile.pipeline-guard
    container_name: pipeline-guard-secondary
    depends_on:
      - redis
      - pipeline-guard
    ports:
      - "8766:8765"  # Different port for secondary
    volumes:
      - ./config/pipeline-guard-2.yaml:/etc/pipeline-guard/config.yaml:ro
      - ./logs:/var/log/pipeline-guard
      - ./data:/var/lib/pipeline-guard
    environment:
      - PYTHONPATH=/app
      - PIPELINE_GUARD_CONFIG=/etc/pipeline-guard/config.yaml
      - REDIS_URL=redis://redis:6379
    networks:
      - pipeline-guard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pipeline-guard-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - pipeline-guard-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pipeline-guard-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - pipeline-guard-network
    restart: unless-stopped

  # InfluxDB for time series data (optional)
  influxdb:
    image: influxdb:2.7
    container_name: pipeline-guard-influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=pipeline-guard
      - DOCKER_INFLUXDB_INIT_BUCKET=metrics
    networks:
      - pipeline-guard-network
    restart: unless-stopped

  # NGINX for load balancing and reverse proxy
  nginx:
    image: nginx:alpine
    container_name: pipeline-guard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pipeline-guard
      - pipeline-guard-2
    networks:
      - pipeline-guard-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local

networks:
  pipeline-guard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16